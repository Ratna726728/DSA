Search, Insert, and Delete in an Unsorted Array | Array Operations

# Search Operation:
In an unsorted array, the search operation can be performed by linear traversal from the 
first element to the last element.

IMG:(Search Operation.jpg)

Coding implementation of the search operation:
class Main {
   
    // Function to implement
    // search operation
    static int findElement(int arr[], int n, int key)
    {
        for (int i = 0; i < n; i++)
            if (arr[i] == key)
                return i;
 
          // If the key is not found
        return -1;
    }
 
    // Driver's Code
    public static void main(String args[])
    {
        int arr[] = { 12, 34, 10, 6, 40 };
        int n = arr.length;
 
        // Using a last element as search element
        int key = 40;
       
          // Function call
        int position = findElement(arr, n, key);
 
        if (position == -1)
            System.out.println("Element not found");
        else
            System.out.println("Element Found at Position: "
                               + (position + 1));
    }
}

Output:
Element Found at Position: 5

Time Complexity: O(N)
Auxiliary Space: O(1)

# Insert Operation:

1. Insert at the end:

In an unsorted array, the insert operation is faster as compared to a sorted array because we donâ€™t have to care about the position at which the element is to be placed.

IMG:(Insert Operation.jpg)

Coding implementation of inserting an element at the end:

class Main {
    // Function to insert a given key in
    // the array. This function returns n+1
    // if insertion is successful, else n.
    static int insertSorted(int arr[], int n, int key,
                            int capacity)
    {

        // Cannot insert more elements if n
        // is already more than or equal to
        // capacity
        if (n >= capacity)
            return n;

        arr[n] = key;

        return (n + 1);
    }

    // Driver Code
    public static void main(String[] args)
    {
        int[] arr = new int[20];
        arr[0] = 12;
        arr[1] = 16;
        arr[2] = 20;
        arr[3] = 40;
        arr[4] = 50;
        arr[5] = 70;
        int capacity = 20;
        int n = 6;
        int i, key = 26;

        System.out.print("Before Insertion: ");
        for (i = 0; i < n; i++)
            System.out.print(arr[i] + " ");

        // Inserting key
        n = insertSorted(arr, n, key, capacity);

        System.out.print("\n After Insertion: ");
        for (i = 0; i < n; i++)
            System.out.print(arr[i] + " ");
    }
}

Output:
Before Insertion: 12 16 20 40 50 70
After Insertion: 12 16 20 40 50 70 26


Time Complexity: O(1)
Auxiliary Space: O(1)


2. Insert at any position

Insert operation in an array at any position can be performed by shifting elements to the 
right, which are on the right side of the required position.

IMG:(Insert Operation2.jpg)

Coding implementation of inserting an element at any position:
import java.io.*;

// Java Program to Insert an element
// at a specific position in an Array
class GFG {
    static void insertElement(int arr[], int n, int x,
                              int pos)
    {
        // shift elements to the right
        // which are on the right side of pos
        for (int i = n - 1; i >= pos; i--)
            arr[i + 1] = arr[i];
        arr[pos] = x;
    }
    public static void main(String[] args)
    {
        int arr[] = new int[15];
        arr[0] = 2;
        arr[1] = 4;
        arr[2] = 1;
        arr[3] = 8;
        arr[4] = 5;
        int n = 5;
        int x = 10, pos = 2;

        System.out.print("Before Insertion: ");
        for (int i = 0; i < n; i++)
            System.out.print(arr[i] + " ");

        // Inserting key at specific position
        insertElement(arr, n, x, pos);
        n += 1;

        System.out.print("\n\nAfter Insertion: ");
        for (int i = 0; i < n; i++)
            System.out.print(arr[i] + " ");
    }
}

Output:
Before insertion : 2 4 1 8 5
After insertion : 2 4 10 1 8 5


Time complexity: O(N)
Auxiliary Space: O(1)


# Delete Operation:

In the delete operation, the element to be deleted is searched using the linear search, and 
then the delete operation is performed followed by shifting the elements.

IMG:(Delete Operation.jpg)

class Main {
    // function to search a key to
    // be deleted
    static int findElement(int arr[], int n, int key)
    {
        int i;
        for (i = 0; i < n; i++)
            if (arr[i] == key)
                return i;

        return -1;
    }

    // Function to delete an element
    static int deleteElement(int arr[], int n, int key)
    {
        // Find position of element to be
        // deleted
        int pos = findElement(arr, n, key);

        if (pos == -1) {
            System.out.println("Element not found");
            return n;
        }

        // Deleting element
        int i;
        for (i = pos; i < n - 1; i++)
            arr[i] = arr[i + 1];

        return n - 1;
    }

    // Driver's Code
    public static void main(String args[])
    {
        int i;
        int arr[] = { 10, 50, 30, 40, 20 };

        int n = arr.length;
        int key = 30;

        System.out.println("Array before deletion");
        for (i = 0; i < n; i++)
            System.out.print(arr[i] + " ");

          // Function call
        n = deleteElement(arr, n, key);

        System.out.println("\n\nArray after deletion");
        for (i = 0; i < n; i++)
            System.out.print(arr[i] + " ");
    }
}

Output:

Array before deletion
10 50 30 40 20

Array after deletion
10 50 40 20


Time Complexity: O(N)
Auxiliary Space: O(1)
